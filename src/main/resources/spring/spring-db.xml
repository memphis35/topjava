<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:property="http://www.springframework.org/schema/p"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:jpa="http://www.springframework.org/schema/data/jpa"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

    <!--    <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>-->

    <context:annotation-config/>

    <jdbc:initialize-database data-source="dataSource" enabled="${database.init}">
        <jdbc:script location="${jdbc.initLocation}"/>
        <jdbc:script encoding="utf-8" location="classpath:db/populateDB.sql"/>
    </jdbc:initialize-database>

    <!-- Transaction manager for a single JPA EntityManagerFactory (alternative to JTA) -->

    <bean class="org.springframework.core.env.AbstractEnvironment" abstract="true">
        <property name="defaultProfiles">
            <set>
                <value>datajpa</value>
                <value>postgres</value>
            </set>
        </property>
        <property name="activeProfiles">
            <set>
                <value>datajpa</value>
                <value>postgres</value>
            </set>
        </property>
    </bean>
    <beans profile="hsqldb">
        <context:property-placeholder location="classpath:db/hsqldb.properties" system-properties-mode="OVERRIDE"/>

        <!--no pooling-->
        <bean id="dataSource"
              class="org.springframework.jdbc.datasource.DriverManagerDataSource"
              property:driverClassName="org.hsqldb.jdbcDriver"
              property:url="${database.url}"
              property:username="${database.username}"
              property:password="${database.password}"/>
    </beans>

    <beans profile="postgres">
        <!-- https://stackoverflow.com/a/27296470/548473 -->
        <bean class="org.springframework.beans.factory.config.MethodInvokingBean">
            <property name="staticMethod" value="org.slf4j.bridge.SLF4JBridgeHandler.install"/>
        </bean>

        <context:property-placeholder location="classpath:db/postgres.properties" system-properties-mode="OVERRIDE"/>

        <bean id="dataSource"
              class="org.apache.tomcat.jdbc.pool.DataSource"
              property:driverClassName="org.postgresql.Driver"
              property:url="${database.url}"
              property:username="${database.username}"
              property:password="${database.password}"/>
    </beans>

    <beans profile="jdbc">
        <context:component-scan base-package="ru.javawebinar.topjava.repository.jdbc"/>
        <jpa:repositories base-package="ru.javawebinar.topjava.repository.jdbc"/>
        <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
            <constructor-arg ref="dataSource"/>
        </bean>
        <bean id="namedJdbcTemplate" class="org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate">
            <constructor-arg ref="jdbcTemplate"/>
        </bean>
    </beans>

    <beans profile="jpa, datajpa">
        <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"
              property:dataSource-ref="dataSource"
              property:packagesToScan="ru.javawebinar.**.model">
            <!--p:persistenceUnitName="persistenceUnit">-->
            <property name="jpaPropertyMap">
                <map>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).FORMAT_SQL}" value="${hibernate.format_sql}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).USE_SQL_COMMENTS}"
                           value="${hibernate.use_sql_comments}"/>
                    <entry key="#{T(org.hibernate.cfg.AvailableSettings).JPA_PROXY_COMPLIANCE}" value="false"/>
                    <!--<entry key="#{T(org.hibernate.cfg.AvailableSettings).HBM2DDL_AUTO}" value="${hibernate.hbm2ddl.auto}"/>-->
                </map>
            </property>
            <property name="jpaVendorAdapter">
                <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
                    <property name="showSql" value="${jpa.showSql}"/>
                </bean>
            </property>
        </bean>
        <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
            <constructor-arg name="emf" ref="entityManagerFactory"/>
        </bean>
        <tx:annotation-driven/>
    </beans>

    <beans profile="jpa">
        <context:component-scan base-package="ru.javawebinar.**.repository.jpa"/>
        <jpa:repositories base-package="ru.javawebinar.**.repository.jpa"/>
    </beans>

    <beans profile="datajpa">
        <context:component-scan base-package="ru.javawebinar.**.repository.datajpa"/>
        <jpa:repositories base-package="ru.javawebinar.**.repository.datajpa"/>
    </beans>
</beans>